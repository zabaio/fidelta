-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity in_circle_in_circle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_p1_id : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p1_x : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p1_y : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p2_id : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p2_x : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p2_y : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p3_id : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p3_x : IN STD_LOGIC_VECTOR (31 downto 0);
    t_p3_y : IN STD_LOGIC_VECTOR (31 downto 0);
    d_id : IN STD_LOGIC_VECTOR (31 downto 0);
    d_x : IN STD_LOGIC_VECTOR (31 downto 0);
    d_y : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of in_circle_in_circle is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "in_circle_in_circle,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.379000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=3187,HLS_SYN_LUT=2697,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_84_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_84_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_90_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_90_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_15_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_84_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_90_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_96_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component in_circle_in_circle_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1_U1 : component in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_84_p0,
        din1 => grp_fu_84_p1,
        opcode => grp_fu_84_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);

    in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1_U2 : component in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_90_p0,
        din1 => grp_fu_90_p1,
        opcode => grp_fu_90_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_90_p2);

    in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1_U3 : component in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_96_p0,
        din1 => grp_fu_96_p1,
        opcode => grp_fu_96_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_96_p2);

    in_circle_fsub_32ns_32ns_32_2_full_dsp_1_U4 : component in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_102_p0,
        din1 => grp_fu_102_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_102_p2);

    in_circle_fsub_32ns_32ns_32_2_full_dsp_1_U5 : component in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        din1 => grp_fu_108_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_108_p2);

    in_circle_fsub_32ns_32ns_32_2_full_dsp_1_U6 : component in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_114_p0,
        din1 => grp_fu_114_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_114_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U7 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_173,
        din1 => grp_fu_120_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U8 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        din1 => grp_fu_124_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U9 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_128_p0,
        din1 => grp_fu_128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U10 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_210,
        din1 => reg_210,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U11 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_192,
        din1 => reg_192,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U12 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_219,
        din1 => reg_219,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U13 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_183,
        din1 => reg_219,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U14 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_192,
        din1 => reg_210,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U15 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_173,
        din1 => reg_219,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U16 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_192,
        din1 => reg_201,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U17 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_173,
        din1 => reg_210,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U18 : component in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_183,
        din1 => reg_201,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    in_circle_fcmp_32ns_32ns_1_1_1_U19 : component in_circle_in_circle_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_173,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_15_fu_168_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_173 <= grp_fu_84_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_183 <= grp_fu_90_p2;
                reg_192 <= grp_fu_96_p2;
                reg_201 <= grp_fu_102_p2;
                reg_210 <= grp_fu_108_p2;
                reg_219 <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_228 <= grp_fu_120_p2;
                reg_233 <= grp_fu_124_p2;
                reg_238 <= grp_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_10_reg_332 <= grp_fu_164_p2;
                tmp_3_reg_292 <= grp_fu_132_p2;
                tmp_4_reg_297 <= grp_fu_136_p2;
                tmp_5_reg_302 <= grp_fu_140_p2;
                tmp_6_reg_307 <= grp_fu_144_p2;
                tmp_7_reg_312 <= grp_fu_148_p2;
                tmp_8_reg_317 <= grp_fu_152_p2;
                tmp_9_reg_322 <= grp_fu_156_p2;
                tmp_s_reg_327 <= grp_fu_160_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_168_p2),32));

    grp_fu_102_p0_assign_proc : process(ap_CS_fsm_state1, t_p1_y, tmp_6_reg_307, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_102_p0 <= tmp_6_reg_307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_102_p0 <= t_p1_y;
        else 
            grp_fu_102_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_102_p1_assign_proc : process(ap_CS_fsm_state1, d_y, tmp_7_reg_312, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_102_p1 <= tmp_7_reg_312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_102_p1 <= d_y;
        else 
            grp_fu_102_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_108_p0_assign_proc : process(ap_CS_fsm_state1, t_p2_y, tmp_8_reg_317, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_108_p0 <= tmp_8_reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_108_p0 <= t_p2_y;
        else 
            grp_fu_108_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_108_p1_assign_proc : process(ap_CS_fsm_state1, d_y, tmp_9_reg_322, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_108_p1 <= tmp_9_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_108_p1 <= d_y;
        else 
            grp_fu_108_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p0_assign_proc : process(ap_CS_fsm_state1, t_p3_y, tmp_s_reg_327, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_114_p0 <= tmp_s_reg_327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_114_p0 <= t_p3_y;
        else 
            grp_fu_114_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p1_assign_proc : process(ap_CS_fsm_state1, d_y, tmp_10_reg_332, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_114_p1 <= tmp_10_reg_332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_114_p1 <= d_y;
        else 
            grp_fu_114_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_120_p1_assign_proc : process(reg_173, reg_201, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_120_p1 <= reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_120_p1 <= reg_173;
        else 
            grp_fu_120_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p0_assign_proc : process(reg_183, reg_201, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_124_p0 <= reg_183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_124_p0 <= reg_201;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p1_assign_proc : process(reg_201, reg_210, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_124_p1 <= reg_210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_124_p1 <= reg_201;
        else 
            grp_fu_124_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p0_assign_proc : process(reg_183, reg_192, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_128_p0 <= reg_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_128_p0 <= reg_183;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p1_assign_proc : process(reg_183, reg_219, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_128_p1 <= reg_219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_128_p1 <= reg_183;
        else 
            grp_fu_128_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_84_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            grp_fu_84_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_84_opcode <= ap_const_lv2_0;
        else 
            grp_fu_84_opcode <= "XX";
        end if; 
    end process;


    grp_fu_84_p0_assign_proc : process(ap_CS_fsm_state1, t_p1_x, reg_173, reg_228, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_84_p0 <= reg_173;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_84_p0 <= reg_228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_84_p0 <= t_p1_x;
        else 
            grp_fu_84_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_84_p1_assign_proc : process(ap_CS_fsm_state1, d_x, reg_233, reg_238, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_84_p1 <= reg_238;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_84_p1 <= reg_233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_84_p1 <= d_x;
        else 
            grp_fu_84_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_90_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_90_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_90_opcode <= ap_const_lv2_0;
        else 
            grp_fu_90_opcode <= "XX";
        end if; 
    end process;


    grp_fu_90_p0_assign_proc : process(ap_CS_fsm_state1, t_p2_x, reg_238, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_90_p0 <= reg_238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_90_p0 <= t_p2_x;
        else 
            grp_fu_90_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_90_p1_assign_proc : process(ap_CS_fsm_state1, d_x, tmp_3_reg_292, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_90_p1 <= tmp_3_reg_292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_90_p1 <= d_x;
        else 
            grp_fu_90_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_96_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_96_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_96_opcode <= ap_const_lv2_0;
        else 
            grp_fu_96_opcode <= "XX";
        end if; 
    end process;


    grp_fu_96_p0_assign_proc : process(ap_CS_fsm_state1, t_p3_x, tmp_4_reg_297, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_96_p0 <= tmp_4_reg_297;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_96_p0 <= t_p3_x;
        else 
            grp_fu_96_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_96_p1_assign_proc : process(ap_CS_fsm_state1, d_x, tmp_5_reg_302, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_96_p1 <= tmp_5_reg_302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_96_p1 <= d_x;
        else 
            grp_fu_96_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
