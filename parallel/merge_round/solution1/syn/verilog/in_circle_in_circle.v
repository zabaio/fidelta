// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="in_circle_in_circle,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.379000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=3187,HLS_SYN_LUT=2697,HLS_VERSION=2019_2}" *)

module in_circle_in_circle (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_p1_id,
        t_p1_x,
        t_p1_y,
        t_p2_id,
        t_p2_x,
        t_p2_y,
        t_p3_id,
        t_p3_x,
        t_p3_y,
        d_id,
        d_x,
        d_y,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] t_p1_id;
input  [31:0] t_p1_x;
input  [31:0] t_p1_y;
input  [31:0] t_p2_id;
input  [31:0] t_p2_x;
input  [31:0] t_p2_y;
input  [31:0] t_p3_id;
input  [31:0] t_p3_x;
input  [31:0] t_p3_y;
input  [31:0] d_id;
input  [31:0] d_x;
input  [31:0] d_y;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_84_p2;
reg   [31:0] reg_173;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_90_p2;
reg   [31:0] reg_183;
wire   [31:0] grp_fu_96_p2;
reg   [31:0] reg_192;
wire   [31:0] grp_fu_102_p2;
reg   [31:0] reg_201;
wire   [31:0] grp_fu_108_p2;
reg   [31:0] reg_210;
wire   [31:0] grp_fu_114_p2;
reg   [31:0] reg_219;
wire   [31:0] grp_fu_120_p2;
reg   [31:0] reg_228;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_124_p2;
reg   [31:0] reg_233;
wire   [31:0] grp_fu_128_p2;
reg   [31:0] reg_238;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] tmp_3_reg_292;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] tmp_4_reg_297;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] tmp_5_reg_302;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] tmp_6_reg_307;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] tmp_7_reg_312;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] tmp_8_reg_317;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] tmp_9_reg_322;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] tmp_s_reg_327;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] tmp_10_reg_332;
reg   [31:0] grp_fu_84_p0;
reg   [31:0] grp_fu_84_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_90_p0;
reg   [31:0] grp_fu_90_p1;
reg   [31:0] grp_fu_96_p0;
reg   [31:0] grp_fu_96_p1;
reg   [31:0] grp_fu_102_p0;
reg   [31:0] grp_fu_102_p1;
reg   [31:0] grp_fu_108_p0;
reg   [31:0] grp_fu_108_p1;
reg   [31:0] grp_fu_114_p0;
reg   [31:0] grp_fu_114_p1;
reg   [31:0] grp_fu_120_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_124_p0;
reg   [31:0] grp_fu_124_p1;
reg   [31:0] grp_fu_128_p0;
reg   [31:0] grp_fu_128_p1;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_15_fu_168_p2;
reg   [1:0] grp_fu_84_opcode;
reg   [1:0] grp_fu_90_opcode;
reg   [1:0] grp_fu_96_opcode;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_84_p0),
    .din1(grp_fu_84_p1),
    .opcode(grp_fu_84_opcode),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_90_p0),
    .din1(grp_fu_90_p1),
    .opcode(grp_fu_90_opcode),
    .ce(1'b1),
    .dout(grp_fu_90_p2)
);

in_circle_in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_faddfsub_32ns_32ns_32_2_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_96_p0),
    .din1(grp_fu_96_p1),
    .opcode(grp_fu_96_opcode),
    .ce(1'b1),
    .dout(grp_fu_96_p2)
);

in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fsub_32ns_32ns_32_2_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_102_p0),
    .din1(grp_fu_102_p1),
    .ce(1'b1),
    .dout(grp_fu_102_p2)
);

in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fsub_32ns_32ns_32_2_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_108_p0),
    .din1(grp_fu_108_p1),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

in_circle_in_circle_fsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fsub_32ns_32ns_32_2_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_114_p0),
    .din1(grp_fu_114_p1),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_173),
    .din1(grp_fu_120_p1),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .din1(grp_fu_124_p1),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_128_p0),
    .din1(grp_fu_128_p1),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_210),
    .din1(reg_210),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_192),
    .din1(reg_192),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_219),
    .din1(reg_219),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_183),
    .din1(reg_219),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_192),
    .din1(reg_210),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_173),
    .din1(reg_219),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_192),
    .din1(reg_201),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_173),
    .din1(reg_210),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

in_circle_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_183),
    .din1(reg_201),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

in_circle_in_circle_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
in_circle_fcmp_32ns_32ns_1_1_1_U19(
    .din0(reg_173),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_15_fu_168_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_173 <= grp_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_183 <= grp_fu_90_p2;
        reg_192 <= grp_fu_96_p2;
        reg_201 <= grp_fu_102_p2;
        reg_210 <= grp_fu_108_p2;
        reg_219 <= grp_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_228 <= grp_fu_120_p2;
        reg_233 <= grp_fu_124_p2;
        reg_238 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_10_reg_332 <= grp_fu_164_p2;
        tmp_3_reg_292 <= grp_fu_132_p2;
        tmp_4_reg_297 <= grp_fu_136_p2;
        tmp_5_reg_302 <= grp_fu_140_p2;
        tmp_6_reg_307 <= grp_fu_144_p2;
        tmp_7_reg_312 <= grp_fu_148_p2;
        tmp_8_reg_317 <= grp_fu_152_p2;
        tmp_9_reg_322 <= grp_fu_156_p2;
        tmp_s_reg_327 <= grp_fu_160_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_102_p0 = tmp_6_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_102_p0 = t_p1_y;
    end else begin
        grp_fu_102_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_102_p1 = tmp_7_reg_312;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_102_p1 = d_y;
    end else begin
        grp_fu_102_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_108_p0 = tmp_8_reg_317;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_108_p0 = t_p2_y;
    end else begin
        grp_fu_108_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_108_p1 = tmp_9_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_108_p1 = d_y;
    end else begin
        grp_fu_108_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_114_p0 = tmp_s_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_114_p0 = t_p3_y;
    end else begin
        grp_fu_114_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_114_p1 = tmp_10_reg_332;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_114_p1 = d_y;
    end else begin
        grp_fu_114_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_120_p1 = reg_201;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_120_p1 = reg_173;
    end else begin
        grp_fu_120_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_124_p0 = reg_183;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_124_p0 = reg_201;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_124_p1 = reg_210;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_124_p1 = reg_201;
    end else begin
        grp_fu_124_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_128_p0 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_128_p0 = reg_183;
    end else begin
        grp_fu_128_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_128_p1 = reg_219;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_128_p1 = reg_183;
    end else begin
        grp_fu_128_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        grp_fu_84_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_84_opcode = 2'd0;
    end else begin
        grp_fu_84_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_84_p0 = reg_173;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_84_p0 = reg_228;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_84_p0 = t_p1_x;
    end else begin
        grp_fu_84_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_84_p1 = reg_238;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_84_p1 = reg_233;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_84_p1 = d_x;
    end else begin
        grp_fu_84_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_90_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_90_opcode = 2'd0;
    end else begin
        grp_fu_90_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_90_p0 = reg_238;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_90_p0 = t_p2_x;
    end else begin
        grp_fu_90_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_90_p1 = tmp_3_reg_292;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_90_p1 = d_x;
    end else begin
        grp_fu_90_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_96_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_96_opcode = 2'd0;
    end else begin
        grp_fu_96_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_96_p0 = tmp_4_reg_297;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_96_p0 = t_p3_x;
    end else begin
        grp_fu_96_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_96_p1 = tmp_5_reg_302;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_96_p1 = d_x;
    end else begin
        grp_fu_96_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = tmp_15_fu_168_p2;

endmodule //in_circle_in_circle
