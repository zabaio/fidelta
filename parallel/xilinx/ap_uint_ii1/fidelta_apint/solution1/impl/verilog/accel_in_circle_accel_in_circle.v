// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="accel_in_circle_accel_in_circle,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=46,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=146,HLS_SYN_FF=13014,HLS_SYN_LUT=11075,HLS_VERSION=2019_2}" *)

module accel_in_circle_accel_in_circle (
        ap_clk,
        ap_rst_n,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_pp0_stage0 = 14'd256;
parameter    ap_ST_fsm_state29 = 14'd512;
parameter    ap_ST_fsm_state30 = 14'd1024;
parameter    ap_ST_fsm_state31 = 14'd2048;
parameter    ap_ST_fsm_state32 = 14'd4096;
parameter    ap_ST_fsm_state33 = 14'd8192;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] indata_V;
wire   [63:0] instate_V;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln53_reg_905;
reg    gmem0_blk_n_AR;
reg    gmem0_blk_n_AW;
wire    ap_CS_fsm_state8;
reg    gmem0_blk_n_R;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] icmp_ln53_reg_905_pp0_iter16_reg;
reg    gmem0_blk_n_W;
reg    ap_enable_reg_pp0_iter19;
reg   [0:0] icmp_ln53_reg_905_pp0_iter18_reg;
reg    gmem0_blk_n_B;
wire    ap_CS_fsm_state33;
wire    gmem1_AWREADY;
wire    gmem1_WREADY;
reg    gmem1_ARVALID;
wire    gmem1_ARREADY;
wire    gmem1_RVALID;
reg    gmem1_RREADY;
wire   [511:0] gmem1_RDATA;
wire    gmem1_RLAST;
wire   [0:0] gmem1_RID;
wire   [0:0] gmem1_RUSER;
wire   [1:0] gmem1_RRESP;
wire    gmem1_BVALID;
wire   [1:0] gmem1_BRESP;
wire   [0:0] gmem1_BID;
wire   [0:0] gmem1_BUSER;
reg    gmem0_AWVALID;
wire    gmem0_AWREADY;
reg    gmem0_WVALID;
wire    gmem0_WREADY;
wire   [63:0] gmem0_WDATA;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [63:0] gmem0_RDATA;
wire    gmem0_RLAST;
wire   [0:0] gmem0_RID;
wire   [0:0] gmem0_RUSER;
wire   [1:0] gmem0_RRESP;
wire    gmem0_BVALID;
reg    gmem0_BREADY;
wire   [1:0] gmem0_BRESP;
wire   [0:0] gmem0_BID;
wire   [0:0] gmem0_BUSER;
reg   [3:0] i_0_reg_208;
reg   [60:0] tmp_5_reg_882;
reg   [57:0] indata_V1_reg_887;
reg    ap_block_state2_io;
reg   [63:0] gmem0_addr_reg_898;
wire   [0:0] icmp_ln53_fu_501_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state14_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state18_pp0_stage0_iter9;
wire    ap_block_state19_pp0_stage0_iter10;
wire    ap_block_state20_pp0_stage0_iter11;
wire    ap_block_state21_pp0_stage0_iter12;
wire    ap_block_state22_pp0_stage0_iter13;
wire    ap_block_state23_pp0_stage0_iter14;
wire    ap_block_state24_pp0_stage0_iter15;
wire    ap_block_state25_pp0_stage0_iter16;
reg    ap_block_state26_pp0_stage0_iter17;
wire    ap_block_state27_pp0_stage0_iter18;
wire    ap_block_state28_pp0_stage0_iter19;
reg    ap_block_state28_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln53_reg_905_pp0_iter1_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter2_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter3_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter4_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter5_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter6_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter7_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter8_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter9_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter10_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter11_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter12_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter13_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter14_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter15_reg;
reg   [0:0] icmp_ln53_reg_905_pp0_iter17_reg;
wire   [3:0] i_fu_507_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] trunc_ln647_fu_513_p1;
reg   [31:0] trunc_ln647_reg_914;
reg   [31:0] p_Result_0_1_reg_919;
reg   [31:0] p_Result_0_2_reg_924;
reg   [31:0] p_Result_0_3_reg_929;
reg   [31:0] p_Result_0_4_reg_934;
reg   [31:0] p_Result_0_5_reg_939;
reg   [31:0] p_Result_0_6_reg_944;
reg   [31:0] p_Result_0_7_reg_949;
reg   [31:0] p_Result_1_reg_954;
reg   [31:0] p_Result_1_1_reg_959;
reg   [31:0] p_Result_1_2_reg_964;
reg   [31:0] p_Result_1_3_reg_969;
reg   [31:0] p_Result_1_4_reg_974;
reg   [31:0] p_Result_1_5_reg_979;
reg   [31:0] p_Result_1_6_reg_984;
reg   [31:0] p_Result_1_7_reg_989;
wire   [31:0] data_0_0_fu_667_p1;
wire   [31:0] data_0_1_fu_673_p1;
wire   [31:0] data_1_0_fu_703_p1;
wire   [31:0] data_1_1_fu_709_p1;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] xda_reg_1082;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] xdb_reg_1090;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] xdc_reg_1098;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] yda_reg_1106;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] ydb_reg_1114;
wire   [31:0] grp_fu_239_p2;
reg   [31:0] ydc_reg_1122;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] xda_1_reg_1130;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] xdb_1_reg_1138;
wire   [31:0] grp_fu_251_p2;
reg   [31:0] xdc_1_reg_1146;
wire   [31:0] grp_fu_255_p2;
reg   [31:0] yda_1_reg_1154;
wire   [31:0] grp_fu_259_p2;
reg   [31:0] ydb_1_reg_1162;
wire   [31:0] grp_fu_263_p2;
reg   [31:0] ydc_1_reg_1170;
wire   [31:0] grp_fu_331_p2;
reg   [31:0] tmp_i_reg_1178;
wire   [31:0] grp_fu_335_p2;
reg   [31:0] tmp_1_i_reg_1183;
wire   [31:0] grp_fu_339_p2;
reg   [31:0] tmp_2_i_reg_1188;
wire   [31:0] grp_fu_343_p2;
reg   [31:0] tmp_3_i_reg_1193;
wire   [31:0] grp_fu_347_p2;
reg   [31:0] tmp_4_i_reg_1198;
wire   [31:0] grp_fu_351_p2;
reg   [31:0] tmp_5_i_reg_1203;
wire   [31:0] grp_fu_355_p2;
reg   [31:0] tmp_6_i_reg_1208;
wire   [31:0] grp_fu_359_p2;
reg   [31:0] tmp_7_i_reg_1213;
wire   [31:0] grp_fu_363_p2;
reg   [31:0] tmp_8_i_reg_1218;
wire   [31:0] grp_fu_367_p2;
reg   [31:0] tmp_9_i_reg_1223;
wire   [31:0] grp_fu_371_p2;
reg   [31:0] tmp_i_9_reg_1228;
wire   [31:0] grp_fu_375_p2;
reg   [31:0] tmp_10_i_reg_1233;
wire   [31:0] grp_fu_379_p2;
reg   [31:0] tmp_i1_reg_1238;
wire   [31:0] grp_fu_383_p2;
reg   [31:0] tmp_1_i1_reg_1243;
wire   [31:0] grp_fu_387_p2;
reg   [31:0] tmp_2_i1_reg_1248;
wire   [31:0] grp_fu_391_p2;
reg   [31:0] tmp_3_i1_reg_1253;
wire   [31:0] grp_fu_395_p2;
reg   [31:0] tmp_4_i1_reg_1258;
wire   [31:0] grp_fu_399_p2;
reg   [31:0] tmp_5_i1_reg_1263;
wire   [31:0] grp_fu_403_p2;
reg   [31:0] tmp_6_i1_reg_1268;
wire   [31:0] grp_fu_407_p2;
reg   [31:0] tmp_7_i1_reg_1273;
wire   [31:0] grp_fu_411_p2;
reg   [31:0] tmp_8_i1_reg_1278;
wire   [31:0] grp_fu_415_p2;
reg   [31:0] tmp_9_i1_reg_1283;
wire   [31:0] grp_fu_419_p2;
reg   [31:0] tmp_i1_10_reg_1288;
wire   [31:0] grp_fu_423_p2;
reg   [31:0] tmp_10_i1_reg_1293;
wire   [31:0] grp_fu_267_p2;
reg   [31:0] da2da2_reg_1298;
wire   [31:0] grp_fu_271_p2;
reg   [31:0] db2db2_reg_1303;
wire   [31:0] grp_fu_275_p2;
reg   [31:0] dc2dc2_reg_1308;
wire   [31:0] grp_fu_279_p2;
reg   [31:0] min1_reg_1313;
wire   [31:0] grp_fu_283_p2;
reg   [31:0] min2_reg_1318;
wire   [31:0] grp_fu_287_p2;
reg   [31:0] min3_reg_1323;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] da2da2_1_reg_1328;
wire   [31:0] grp_fu_295_p2;
reg   [31:0] db2db2_1_reg_1333;
wire   [31:0] grp_fu_299_p2;
reg   [31:0] dc2dc2_1_reg_1338;
wire   [31:0] grp_fu_303_p2;
reg   [31:0] min1_1_reg_1343;
wire   [31:0] grp_fu_307_p2;
reg   [31:0] min2_1_reg_1348;
wire   [31:0] grp_fu_311_p2;
reg   [31:0] min3_1_reg_1353;
wire   [31:0] grp_fu_427_p2;
reg   [31:0] tmp_11_i_reg_1358;
wire   [31:0] grp_fu_431_p2;
reg   [31:0] tmp_12_i_reg_1363;
wire   [31:0] grp_fu_435_p2;
reg   [31:0] tmp_14_i_reg_1368;
reg   [31:0] tmp_14_i_reg_1368_pp0_iter12_reg;
reg   [31:0] tmp_14_i_reg_1368_pp0_iter13_reg;
reg   [31:0] tmp_14_i_reg_1368_pp0_iter14_reg;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] tmp_11_i1_reg_1373;
wire   [31:0] grp_fu_443_p2;
reg   [31:0] tmp_12_i1_reg_1378;
wire   [31:0] grp_fu_447_p2;
reg   [31:0] tmp_14_i1_reg_1383;
reg   [31:0] tmp_14_i1_reg_1383_pp0_iter12_reg;
reg   [31:0] tmp_14_i1_reg_1383_pp0_iter13_reg;
reg   [31:0] tmp_14_i1_reg_1383_pp0_iter14_reg;
wire   [31:0] grp_fu_315_p2;
reg   [31:0] tmp_13_i_reg_1388;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] tmp_13_i1_reg_1393;
wire   [31:0] state_0_V_fu_739_p1;
reg   [31:0] state_0_V_reg_1398;
reg   [31:0] state_1_V_reg_1404;
wire   [31:0] grp_fu_323_p2;
reg   [31:0] det_reg_1410;
wire   [31:0] grp_fu_327_p2;
reg   [31:0] det_1_reg_1416;
wire   [31:0] v2_V_fu_806_p3;
reg   [31:0] v2_V_reg_1422;
wire   [31:0] v1_V_fu_867_p3;
reg   [31:0] v1_V_reg_1427;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter18;
wire   [63:0] empty_fu_481_p1;
wire   [63:0] zext_ln58_fu_491_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_219_p0;
wire   [31:0] grp_fu_223_p0;
wire   [31:0] grp_fu_227_p0;
wire   [31:0] grp_fu_231_p0;
wire   [31:0] grp_fu_235_p0;
wire   [31:0] grp_fu_239_p0;
wire   [31:0] grp_fu_243_p0;
wire   [31:0] grp_fu_247_p0;
wire   [31:0] grp_fu_251_p0;
wire   [31:0] grp_fu_255_p0;
wire   [31:0] grp_fu_259_p0;
wire   [31:0] grp_fu_263_p0;
wire   [31:0] bitcast_ln30_fu_758_p1;
wire   [7:0] tmp_1_fu_761_p4;
wire   [22:0] trunc_ln30_fu_771_p1;
wire   [0:0] icmp_ln30_1_fu_781_p2;
wire   [0:0] icmp_ln30_fu_775_p2;
wire   [0:0] or_ln30_fu_787_p2;
wire   [0:0] tmp_2_fu_451_p2;
wire   [0:0] and_ln30_fu_793_p2;
wire   [0:0] icmp_ln883_fu_753_p2;
wire   [31:0] select_ln82_fu_799_p3;
wire   [31:0] bitcast_ln30_1_fu_819_p1;
wire   [7:0] tmp_3_fu_822_p4;
wire   [22:0] trunc_ln30_1_fu_832_p1;
wire   [0:0] icmp_ln30_3_fu_842_p2;
wire   [0:0] icmp_ln30_2_fu_836_p2;
wire   [0:0] or_ln30_1_fu_848_p2;
wire   [0:0] tmp_4_fu_456_p2;
wire   [0:0] and_ln30_1_fu_854_p2;
wire   [0:0] icmp_ln883_1_fu_814_p2;
wire   [31:0] select_ln82_1_fu_860_p3;
reg    grp_fu_219_ce;
reg    grp_fu_223_ce;
reg    grp_fu_227_ce;
reg    grp_fu_231_ce;
reg    grp_fu_235_ce;
reg    grp_fu_239_ce;
reg    grp_fu_243_ce;
reg    grp_fu_247_ce;
reg    grp_fu_251_ce;
reg    grp_fu_255_ce;
reg    grp_fu_259_ce;
reg    grp_fu_263_ce;
reg    grp_fu_267_ce;
reg    grp_fu_271_ce;
reg    grp_fu_275_ce;
reg    grp_fu_279_ce;
reg    grp_fu_283_ce;
reg    grp_fu_287_ce;
reg    grp_fu_291_ce;
reg    grp_fu_295_ce;
reg    grp_fu_299_ce;
reg    grp_fu_303_ce;
reg    grp_fu_307_ce;
reg    grp_fu_311_ce;
reg    grp_fu_315_ce;
reg    grp_fu_319_ce;
reg    grp_fu_323_ce;
reg    grp_fu_327_ce;
reg    grp_fu_331_ce;
reg    grp_fu_335_ce;
reg    grp_fu_339_ce;
reg    grp_fu_343_ce;
reg    grp_fu_347_ce;
reg    grp_fu_351_ce;
reg    grp_fu_355_ce;
reg    grp_fu_359_ce;
reg    grp_fu_363_ce;
reg    grp_fu_367_ce;
reg    grp_fu_371_ce;
reg    grp_fu_375_ce;
reg    grp_fu_379_ce;
reg    grp_fu_383_ce;
reg    grp_fu_387_ce;
reg    grp_fu_391_ce;
reg    grp_fu_395_ce;
reg    grp_fu_399_ce;
reg    grp_fu_403_ce;
reg    grp_fu_407_ce;
reg    grp_fu_411_ce;
reg    grp_fu_415_ce;
reg    grp_fu_419_ce;
reg    grp_fu_423_ce;
reg    grp_fu_427_ce;
reg    grp_fu_431_ce;
reg    grp_fu_435_ce;
reg    grp_fu_439_ce;
reg    grp_fu_443_ce;
reg    grp_fu_447_ce;
reg    ap_block_pp0_stage0_00001;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
end

accel_in_circle_accel_in_circle_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
accel_in_circle_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .indata_V(indata_V),
    .instate_V(instate_V)
);

accel_in_circle_accel_in_circle_gmem1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ))
accel_in_circle_gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem1_ARVALID),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(empty_fu_481_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd15),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(gmem1_RREADY),
    .I_RDATA(gmem1_RDATA),
    .I_RID(gmem1_RID),
    .I_RUSER(gmem1_RUSER),
    .I_RRESP(gmem1_RRESP),
    .I_RLAST(gmem1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(512'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd0),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem1_BRESP),
    .I_BID(gmem1_BID),
    .I_BUSER(gmem1_BUSER)
);

accel_in_circle_accel_in_circle_gmem0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ))
accel_in_circle_gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(zext_ln58_fu_491_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd15),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RID(gmem0_RID),
    .I_RUSER(gmem0_RUSER),
    .I_RRESP(gmem0_RRESP),
    .I_RLAST(gmem0_RLAST),
    .I_AWVALID(gmem0_AWVALID),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(gmem0_addr_reg_898),
    .I_AWID(1'd0),
    .I_AWLEN(32'd15),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem0_WVALID),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(gmem0_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(gmem0_BREADY),
    .I_BRESP(gmem0_BRESP),
    .I_BID(gmem0_BID),
    .I_BUSER(gmem0_BUSER)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_219_p0),
    .din1(data_0_0_fu_667_p1),
    .ce(grp_fu_219_ce),
    .dout(grp_fu_219_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_223_p0),
    .din1(data_0_0_fu_667_p1),
    .ce(grp_fu_223_ce),
    .dout(grp_fu_223_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_227_p0),
    .din1(data_0_0_fu_667_p1),
    .ce(grp_fu_227_ce),
    .dout(grp_fu_227_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_231_p0),
    .din1(data_0_1_fu_673_p1),
    .ce(grp_fu_231_ce),
    .dout(grp_fu_231_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_235_p0),
    .din1(data_0_1_fu_673_p1),
    .ce(grp_fu_235_ce),
    .dout(grp_fu_235_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_239_p0),
    .din1(data_0_1_fu_673_p1),
    .ce(grp_fu_239_ce),
    .dout(grp_fu_239_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_243_p0),
    .din1(data_1_0_fu_703_p1),
    .ce(grp_fu_243_ce),
    .dout(grp_fu_243_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_247_p0),
    .din1(data_1_0_fu_703_p1),
    .ce(grp_fu_247_ce),
    .dout(grp_fu_247_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_251_p0),
    .din1(data_1_0_fu_703_p1),
    .ce(grp_fu_251_ce),
    .dout(grp_fu_251_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_255_p0),
    .din1(data_1_1_fu_709_p1),
    .ce(grp_fu_255_ce),
    .dout(grp_fu_255_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_259_p0),
    .din1(data_1_1_fu_709_p1),
    .ce(grp_fu_259_ce),
    .dout(grp_fu_259_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_263_p0),
    .din1(data_1_1_fu_709_p1),
    .ce(grp_fu_263_ce),
    .dout(grp_fu_263_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_reg_1178),
    .din1(tmp_1_i_reg_1183),
    .ce(grp_fu_267_ce),
    .dout(grp_fu_267_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_i_reg_1188),
    .din1(tmp_3_i_reg_1193),
    .ce(grp_fu_271_ce),
    .dout(grp_fu_271_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i_reg_1198),
    .din1(tmp_5_i_reg_1203),
    .ce(grp_fu_275_ce),
    .dout(grp_fu_275_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_i_reg_1208),
    .din1(tmp_7_i_reg_1213),
    .ce(grp_fu_279_ce),
    .dout(grp_fu_279_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_i_reg_1218),
    .din1(tmp_9_i_reg_1223),
    .ce(grp_fu_283_ce),
    .dout(grp_fu_283_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_9_reg_1228),
    .din1(tmp_10_i_reg_1233),
    .ce(grp_fu_287_ce),
    .dout(grp_fu_287_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i1_reg_1238),
    .din1(tmp_1_i1_reg_1243),
    .ce(grp_fu_291_ce),
    .dout(grp_fu_291_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_i1_reg_1248),
    .din1(tmp_3_i1_reg_1253),
    .ce(grp_fu_295_ce),
    .dout(grp_fu_295_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_i1_reg_1258),
    .din1(tmp_5_i1_reg_1263),
    .ce(grp_fu_299_ce),
    .dout(grp_fu_299_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_i1_reg_1268),
    .din1(tmp_7_i1_reg_1273),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_i1_reg_1278),
    .din1(tmp_9_i1_reg_1283),
    .ce(grp_fu_307_ce),
    .dout(grp_fu_307_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i1_10_reg_1288),
    .din1(tmp_10_i1_reg_1293),
    .ce(grp_fu_311_ce),
    .dout(grp_fu_311_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_11_i_reg_1358),
    .din1(tmp_12_i_reg_1363),
    .ce(grp_fu_315_ce),
    .dout(grp_fu_315_p2)
);

accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_11_i1_reg_1373),
    .din1(tmp_12_i1_reg_1378),
    .ce(grp_fu_319_ce),
    .dout(grp_fu_319_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_13_i_reg_1388),
    .din1(tmp_14_i_reg_1368_pp0_iter14_reg),
    .ce(grp_fu_323_ce),
    .dout(grp_fu_323_p2)
);

accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_13_i1_reg_1393),
    .din1(tmp_14_i1_reg_1383_pp0_iter14_reg),
    .ce(grp_fu_327_ce),
    .dout(grp_fu_327_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xda_reg_1082),
    .din1(xda_reg_1082),
    .ce(grp_fu_331_ce),
    .dout(grp_fu_331_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(yda_reg_1106),
    .din1(yda_reg_1106),
    .ce(grp_fu_335_ce),
    .dout(grp_fu_335_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdb_reg_1090),
    .din1(xdb_reg_1090),
    .ce(grp_fu_339_ce),
    .dout(grp_fu_339_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydb_reg_1114),
    .din1(ydb_reg_1114),
    .ce(grp_fu_343_ce),
    .dout(grp_fu_343_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdc_reg_1098),
    .din1(xdc_reg_1098),
    .ce(grp_fu_347_ce),
    .dout(grp_fu_347_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydc_reg_1122),
    .din1(ydc_reg_1122),
    .ce(grp_fu_351_ce),
    .dout(grp_fu_351_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdb_reg_1090),
    .din1(ydc_reg_1122),
    .ce(grp_fu_355_ce),
    .dout(grp_fu_355_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdc_reg_1098),
    .din1(ydb_reg_1114),
    .ce(grp_fu_359_ce),
    .dout(grp_fu_359_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xda_reg_1082),
    .din1(ydc_reg_1122),
    .ce(grp_fu_363_ce),
    .dout(grp_fu_363_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdc_reg_1098),
    .din1(yda_reg_1106),
    .ce(grp_fu_367_ce),
    .dout(grp_fu_367_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xda_reg_1082),
    .din1(ydb_reg_1114),
    .ce(grp_fu_371_ce),
    .dout(grp_fu_371_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdb_reg_1090),
    .din1(yda_reg_1106),
    .ce(grp_fu_375_ce),
    .dout(grp_fu_375_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xda_1_reg_1130),
    .din1(xda_1_reg_1130),
    .ce(grp_fu_379_ce),
    .dout(grp_fu_379_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(yda_1_reg_1154),
    .din1(yda_1_reg_1154),
    .ce(grp_fu_383_ce),
    .dout(grp_fu_383_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdb_1_reg_1138),
    .din1(xdb_1_reg_1138),
    .ce(grp_fu_387_ce),
    .dout(grp_fu_387_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydb_1_reg_1162),
    .din1(ydb_1_reg_1162),
    .ce(grp_fu_391_ce),
    .dout(grp_fu_391_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdc_1_reg_1146),
    .din1(xdc_1_reg_1146),
    .ce(grp_fu_395_ce),
    .dout(grp_fu_395_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydc_1_reg_1170),
    .din1(ydc_1_reg_1170),
    .ce(grp_fu_399_ce),
    .dout(grp_fu_399_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdb_1_reg_1138),
    .din1(ydc_1_reg_1170),
    .ce(grp_fu_403_ce),
    .dout(grp_fu_403_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdc_1_reg_1146),
    .din1(ydb_1_reg_1162),
    .ce(grp_fu_407_ce),
    .dout(grp_fu_407_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xda_1_reg_1130),
    .din1(ydc_1_reg_1170),
    .ce(grp_fu_411_ce),
    .dout(grp_fu_411_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdc_1_reg_1146),
    .din1(yda_1_reg_1154),
    .ce(grp_fu_415_ce),
    .dout(grp_fu_415_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U51(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xda_1_reg_1130),
    .din1(ydb_1_reg_1162),
    .ce(grp_fu_419_ce),
    .dout(grp_fu_419_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xdb_1_reg_1138),
    .din1(yda_1_reg_1154),
    .ce(grp_fu_423_ce),
    .dout(grp_fu_423_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(da2da2_reg_1298),
    .din1(min1_reg_1313),
    .ce(grp_fu_427_ce),
    .dout(grp_fu_427_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(db2db2_reg_1303),
    .din1(min2_reg_1318),
    .ce(grp_fu_431_ce),
    .dout(grp_fu_431_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dc2dc2_reg_1308),
    .din1(min3_reg_1323),
    .ce(grp_fu_435_ce),
    .dout(grp_fu_435_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(da2da2_1_reg_1328),
    .din1(min1_1_reg_1343),
    .ce(grp_fu_439_ce),
    .dout(grp_fu_439_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(db2db2_1_reg_1333),
    .din1(min2_1_reg_1348),
    .ce(grp_fu_443_ce),
    .dout(grp_fu_443_p2)
);

accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dc2dc2_1_reg_1338),
    .din1(min3_1_reg_1353),
    .ce(grp_fu_447_ce),
    .dout(grp_fu_447_p2)
);

accel_in_circle_accel_in_circle_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
accel_in_circle_fcmp_32ns_32ns_1_1_1_U59(
    .din0(det_reg_1410),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_2_fu_451_p2)
);

accel_in_circle_accel_in_circle_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
accel_in_circle_fcmp_32ns_32ns_1_1_1_U60(
    .din0(det_1_reg_1416),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_456_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_fu_501_p2 == 1'd0))) begin
        i_0_reg_208 <= i_fu_507_p2;
    end else if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_reg_208 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter8_reg == 1'd0))) begin
        da2da2_1_reg_1328 <= grp_fu_291_p2;
        da2da2_reg_1298 <= grp_fu_267_p2;
        db2db2_1_reg_1333 <= grp_fu_295_p2;
        db2db2_reg_1303 <= grp_fu_271_p2;
        dc2dc2_1_reg_1338 <= grp_fu_299_p2;
        dc2dc2_reg_1308 <= grp_fu_275_p2;
        min1_1_reg_1343 <= grp_fu_303_p2;
        min1_reg_1313 <= grp_fu_279_p2;
        min2_1_reg_1348 <= grp_fu_307_p2;
        min2_reg_1318 <= grp_fu_283_p2;
        min3_1_reg_1353 <= grp_fu_311_p2;
        min3_reg_1323 <= grp_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0))) begin
        det_1_reg_1416 <= grp_fu_327_p2;
        det_reg_1410 <= grp_fu_323_p2;
        state_0_V_reg_1398 <= state_0_V_fu_739_p1;
        state_1_V_reg_1404 <= {{gmem0_RDATA[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem0_addr_reg_898[60 : 0] <= zext_ln58_fu_491_p1[60 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln53_reg_905 <= icmp_ln53_fu_501_p2;
        icmp_ln53_reg_905_pp0_iter1_reg <= icmp_ln53_reg_905;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln53_reg_905_pp0_iter10_reg <= icmp_ln53_reg_905_pp0_iter9_reg;
        icmp_ln53_reg_905_pp0_iter11_reg <= icmp_ln53_reg_905_pp0_iter10_reg;
        icmp_ln53_reg_905_pp0_iter12_reg <= icmp_ln53_reg_905_pp0_iter11_reg;
        icmp_ln53_reg_905_pp0_iter13_reg <= icmp_ln53_reg_905_pp0_iter12_reg;
        icmp_ln53_reg_905_pp0_iter14_reg <= icmp_ln53_reg_905_pp0_iter13_reg;
        icmp_ln53_reg_905_pp0_iter15_reg <= icmp_ln53_reg_905_pp0_iter14_reg;
        icmp_ln53_reg_905_pp0_iter16_reg <= icmp_ln53_reg_905_pp0_iter15_reg;
        icmp_ln53_reg_905_pp0_iter17_reg <= icmp_ln53_reg_905_pp0_iter16_reg;
        icmp_ln53_reg_905_pp0_iter18_reg <= icmp_ln53_reg_905_pp0_iter17_reg;
        icmp_ln53_reg_905_pp0_iter2_reg <= icmp_ln53_reg_905_pp0_iter1_reg;
        icmp_ln53_reg_905_pp0_iter3_reg <= icmp_ln53_reg_905_pp0_iter2_reg;
        icmp_ln53_reg_905_pp0_iter4_reg <= icmp_ln53_reg_905_pp0_iter3_reg;
        icmp_ln53_reg_905_pp0_iter5_reg <= icmp_ln53_reg_905_pp0_iter4_reg;
        icmp_ln53_reg_905_pp0_iter6_reg <= icmp_ln53_reg_905_pp0_iter5_reg;
        icmp_ln53_reg_905_pp0_iter7_reg <= icmp_ln53_reg_905_pp0_iter6_reg;
        icmp_ln53_reg_905_pp0_iter8_reg <= icmp_ln53_reg_905_pp0_iter7_reg;
        icmp_ln53_reg_905_pp0_iter9_reg <= icmp_ln53_reg_905_pp0_iter8_reg;
        tmp_14_i1_reg_1383_pp0_iter12_reg <= tmp_14_i1_reg_1383;
        tmp_14_i1_reg_1383_pp0_iter13_reg <= tmp_14_i1_reg_1383_pp0_iter12_reg;
        tmp_14_i1_reg_1383_pp0_iter14_reg <= tmp_14_i1_reg_1383_pp0_iter13_reg;
        tmp_14_i_reg_1368_pp0_iter12_reg <= tmp_14_i_reg_1368;
        tmp_14_i_reg_1368_pp0_iter13_reg <= tmp_14_i_reg_1368_pp0_iter12_reg;
        tmp_14_i_reg_1368_pp0_iter14_reg <= tmp_14_i_reg_1368_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indata_V1_reg_887 <= {{indata_V[63:6]}};
        tmp_5_reg_882 <= {{instate_V[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_reg_905 == 1'd0))) begin
        p_Result_0_1_reg_919 <= {{gmem1_RDATA[63:32]}};
        p_Result_0_2_reg_924 <= {{gmem1_RDATA[95:64]}};
        p_Result_0_3_reg_929 <= {{gmem1_RDATA[127:96]}};
        p_Result_0_4_reg_934 <= {{gmem1_RDATA[159:128]}};
        p_Result_0_5_reg_939 <= {{gmem1_RDATA[191:160]}};
        p_Result_0_6_reg_944 <= {{gmem1_RDATA[223:192]}};
        p_Result_0_7_reg_949 <= {{gmem1_RDATA[255:224]}};
        p_Result_1_1_reg_959 <= {{gmem1_RDATA[319:288]}};
        p_Result_1_2_reg_964 <= {{gmem1_RDATA[351:320]}};
        p_Result_1_3_reg_969 <= {{gmem1_RDATA[383:352]}};
        p_Result_1_4_reg_974 <= {{gmem1_RDATA[415:384]}};
        p_Result_1_5_reg_979 <= {{gmem1_RDATA[447:416]}};
        p_Result_1_6_reg_984 <= {{gmem1_RDATA[479:448]}};
        p_Result_1_7_reg_989 <= {{gmem1_RDATA[511:480]}};
        p_Result_1_reg_954 <= {{gmem1_RDATA[287:256]}};
        trunc_ln647_reg_914 <= trunc_ln647_fu_513_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter5_reg == 1'd0))) begin
        tmp_10_i1_reg_1293 <= grp_fu_423_p2;
        tmp_10_i_reg_1233 <= grp_fu_375_p2;
        tmp_1_i1_reg_1243 <= grp_fu_383_p2;
        tmp_1_i_reg_1183 <= grp_fu_335_p2;
        tmp_2_i1_reg_1248 <= grp_fu_387_p2;
        tmp_2_i_reg_1188 <= grp_fu_339_p2;
        tmp_3_i1_reg_1253 <= grp_fu_391_p2;
        tmp_3_i_reg_1193 <= grp_fu_343_p2;
        tmp_4_i1_reg_1258 <= grp_fu_395_p2;
        tmp_4_i_reg_1198 <= grp_fu_347_p2;
        tmp_5_i1_reg_1263 <= grp_fu_399_p2;
        tmp_5_i_reg_1203 <= grp_fu_351_p2;
        tmp_6_i1_reg_1268 <= grp_fu_403_p2;
        tmp_6_i_reg_1208 <= grp_fu_355_p2;
        tmp_7_i1_reg_1273 <= grp_fu_407_p2;
        tmp_7_i_reg_1213 <= grp_fu_359_p2;
        tmp_8_i1_reg_1278 <= grp_fu_411_p2;
        tmp_8_i_reg_1218 <= grp_fu_363_p2;
        tmp_9_i1_reg_1283 <= grp_fu_415_p2;
        tmp_9_i_reg_1223 <= grp_fu_367_p2;
        tmp_i1_10_reg_1288 <= grp_fu_419_p2;
        tmp_i1_reg_1238 <= grp_fu_379_p2;
        tmp_i_9_reg_1228 <= grp_fu_371_p2;
        tmp_i_reg_1178 <= grp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter10_reg == 1'd0))) begin
        tmp_11_i1_reg_1373 <= grp_fu_439_p2;
        tmp_11_i_reg_1358 <= grp_fu_427_p2;
        tmp_12_i1_reg_1378 <= grp_fu_443_p2;
        tmp_12_i_reg_1363 <= grp_fu_431_p2;
        tmp_14_i1_reg_1383 <= grp_fu_447_p2;
        tmp_14_i_reg_1368 <= grp_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter13_reg == 1'd0))) begin
        tmp_13_i1_reg_1393 <= grp_fu_319_p2;
        tmp_13_i_reg_1388 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter17_reg == 1'd0))) begin
        v1_V_reg_1427 <= v1_V_fu_867_p3;
        v2_V_reg_1422 <= v2_V_fu_806_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln53_reg_905_pp0_iter3_reg == 1'd0))) begin
        xda_1_reg_1130 <= grp_fu_243_p2;
        xda_reg_1082 <= grp_fu_219_p2;
        xdb_1_reg_1138 <= grp_fu_247_p2;
        xdb_reg_1090 <= grp_fu_223_p2;
        xdc_1_reg_1146 <= grp_fu_251_p2;
        xdc_reg_1098 <= grp_fu_227_p2;
        yda_1_reg_1154 <= grp_fu_255_p2;
        yda_reg_1106 <= grp_fu_231_p2;
        ydb_1_reg_1162 <= grp_fu_259_p2;
        ydb_reg_1114 <= grp_fu_235_p2;
        ydc_1_reg_1170 <= grp_fu_263_p2;
        ydc_reg_1122 <= grp_fu_239_p2;
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_501_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        gmem0_AWVALID = 1'b1;
    end else begin
        gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        gmem0_BREADY = 1'b1;
    end else begin
        gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1) & (icmp_ln53_reg_905_pp0_iter18_reg == 1'd0))) begin
        gmem0_WVALID = 1'b1;
    end else begin
        gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (icmp_ln53_reg_905_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem1_ARVALID = 1'b1;
    end else begin
        gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_reg_905 == 1'd0))) begin
        gmem1_RREADY = 1'b1;
    end else begin
        gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln53_reg_905 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_219_ce = 1'b1;
    end else begin
        grp_fu_219_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_223_ce = 1'b1;
    end else begin
        grp_fu_223_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_227_ce = 1'b1;
    end else begin
        grp_fu_227_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_231_ce = 1'b1;
    end else begin
        grp_fu_231_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_235_ce = 1'b1;
    end else begin
        grp_fu_235_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_239_ce = 1'b1;
    end else begin
        grp_fu_239_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_243_ce = 1'b1;
    end else begin
        grp_fu_243_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_247_ce = 1'b1;
    end else begin
        grp_fu_247_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_251_ce = 1'b1;
    end else begin
        grp_fu_251_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_255_ce = 1'b1;
    end else begin
        grp_fu_255_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_259_ce = 1'b1;
    end else begin
        grp_fu_259_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_263_ce = 1'b1;
    end else begin
        grp_fu_263_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_267_ce = 1'b1;
    end else begin
        grp_fu_267_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_271_ce = 1'b1;
    end else begin
        grp_fu_271_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_275_ce = 1'b1;
    end else begin
        grp_fu_275_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_279_ce = 1'b1;
    end else begin
        grp_fu_279_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_283_ce = 1'b1;
    end else begin
        grp_fu_283_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_287_ce = 1'b1;
    end else begin
        grp_fu_287_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_291_ce = 1'b1;
    end else begin
        grp_fu_291_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_295_ce = 1'b1;
    end else begin
        grp_fu_295_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_299_ce = 1'b1;
    end else begin
        grp_fu_299_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_307_ce = 1'b1;
    end else begin
        grp_fu_307_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_311_ce = 1'b1;
    end else begin
        grp_fu_311_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_315_ce = 1'b1;
    end else begin
        grp_fu_315_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_319_ce = 1'b1;
    end else begin
        grp_fu_319_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_323_ce = 1'b1;
    end else begin
        grp_fu_323_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_327_ce = 1'b1;
    end else begin
        grp_fu_327_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_331_ce = 1'b1;
    end else begin
        grp_fu_331_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_335_ce = 1'b1;
    end else begin
        grp_fu_335_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_339_ce = 1'b1;
    end else begin
        grp_fu_339_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_343_ce = 1'b1;
    end else begin
        grp_fu_343_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_347_ce = 1'b1;
    end else begin
        grp_fu_347_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_351_ce = 1'b1;
    end else begin
        grp_fu_351_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_355_ce = 1'b1;
    end else begin
        grp_fu_355_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_359_ce = 1'b1;
    end else begin
        grp_fu_359_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_363_ce = 1'b1;
    end else begin
        grp_fu_363_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_367_ce = 1'b1;
    end else begin
        grp_fu_367_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_371_ce = 1'b1;
    end else begin
        grp_fu_371_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_375_ce = 1'b1;
    end else begin
        grp_fu_375_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_379_ce = 1'b1;
    end else begin
        grp_fu_379_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_383_ce = 1'b1;
    end else begin
        grp_fu_383_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_387_ce = 1'b1;
    end else begin
        grp_fu_387_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_391_ce = 1'b1;
    end else begin
        grp_fu_391_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_395_ce = 1'b1;
    end else begin
        grp_fu_395_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_399_ce = 1'b1;
    end else begin
        grp_fu_399_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_403_ce = 1'b1;
    end else begin
        grp_fu_403_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_407_ce = 1'b1;
    end else begin
        grp_fu_407_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_411_ce = 1'b1;
    end else begin
        grp_fu_411_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_415_ce = 1'b1;
    end else begin
        grp_fu_415_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_419_ce = 1'b1;
    end else begin
        grp_fu_419_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_423_ce = 1'b1;
    end else begin
        grp_fu_423_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_427_ce = 1'b1;
    end else begin
        grp_fu_427_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_431_ce = 1'b1;
    end else begin
        grp_fu_431_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_435_ce = 1'b1;
    end else begin
        grp_fu_435_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_439_ce = 1'b1;
    end else begin
        grp_fu_439_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_443_ce = 1'b1;
    end else begin
        grp_fu_443_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_447_ce = 1'b1;
    end else begin
        grp_fu_447_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((gmem0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln53_fu_501_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter18 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln53_fu_501_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter18 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((gmem0_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln30_1_fu_854_p2 = (tmp_4_fu_456_p2 & or_ln30_1_fu_848_p2);

assign and_ln30_fu_793_p2 = (tmp_2_fu_451_p2 & or_ln30_fu_787_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0)) | ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln53_reg_905 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0)) | ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln53_reg_905 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0)) | ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln53_reg_905 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0)) | ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln53_reg_905 == 1'd0)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem1_RVALID == 1'b0) & (icmp_ln53_reg_905 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp0_stage0_iter17 = ((gmem0_RVALID == 1'b0) & (icmp_ln53_reg_905_pp0_iter16_reg == 1'd0));
end

assign ap_block_state27_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((gmem0_WREADY == 1'b0) & (icmp_ln53_reg_905_pp0_iter18_reg == 1'd0));
end

assign ap_block_state28_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((gmem0_ARREADY == 1'b0) | (gmem1_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln30_1_fu_819_p1 = det_1_reg_1416;

assign bitcast_ln30_fu_758_p1 = det_reg_1410;

assign data_0_0_fu_667_p1 = trunc_ln647_reg_914;

assign data_0_1_fu_673_p1 = p_Result_0_1_reg_919;

assign data_1_0_fu_703_p1 = p_Result_1_reg_954;

assign data_1_1_fu_709_p1 = p_Result_1_1_reg_959;

assign empty_fu_481_p1 = indata_V1_reg_887;

assign gmem0_WDATA = {{v1_V_reg_1427}, {v2_V_reg_1422}};

assign grp_fu_219_p0 = p_Result_0_2_reg_924;

assign grp_fu_223_p0 = p_Result_0_4_reg_934;

assign grp_fu_227_p0 = p_Result_0_6_reg_944;

assign grp_fu_231_p0 = p_Result_0_3_reg_929;

assign grp_fu_235_p0 = p_Result_0_5_reg_939;

assign grp_fu_239_p0 = p_Result_0_7_reg_949;

assign grp_fu_243_p0 = p_Result_1_2_reg_964;

assign grp_fu_247_p0 = p_Result_1_4_reg_974;

assign grp_fu_251_p0 = p_Result_1_6_reg_984;

assign grp_fu_255_p0 = p_Result_1_3_reg_969;

assign grp_fu_259_p0 = p_Result_1_5_reg_979;

assign grp_fu_263_p0 = p_Result_1_7_reg_989;

assign i_fu_507_p2 = (i_0_reg_208 + 4'd1);

assign icmp_ln30_1_fu_781_p2 = ((trunc_ln30_fu_771_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_2_fu_836_p2 = ((tmp_3_fu_822_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_3_fu_842_p2 = ((trunc_ln30_1_fu_832_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_775_p2 = ((tmp_1_fu_761_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_501_p2 = ((i_0_reg_208 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln883_1_fu_814_p2 = ((state_1_V_reg_1404 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_753_p2 = ((state_0_V_reg_1398 == 32'd4294967295) ? 1'b1 : 1'b0);

assign or_ln30_1_fu_848_p2 = (icmp_ln30_3_fu_842_p2 | icmp_ln30_2_fu_836_p2);

assign or_ln30_fu_787_p2 = (icmp_ln30_fu_775_p2 | icmp_ln30_1_fu_781_p2);

assign select_ln82_1_fu_860_p3 = ((and_ln30_1_fu_854_p2[0:0] === 1'b1) ? state_1_V_reg_1404 : 32'd4294967295);

assign select_ln82_fu_799_p3 = ((and_ln30_fu_793_p2[0:0] === 1'b1) ? state_0_V_reg_1398 : 32'd4294967295);

assign state_0_V_fu_739_p1 = gmem0_RDATA[31:0];

assign tmp_1_fu_761_p4 = {{bitcast_ln30_fu_758_p1[30:23]}};

assign tmp_3_fu_822_p4 = {{bitcast_ln30_1_fu_819_p1[30:23]}};

assign trunc_ln30_1_fu_832_p1 = bitcast_ln30_1_fu_819_p1[22:0];

assign trunc_ln30_fu_771_p1 = bitcast_ln30_fu_758_p1[22:0];

assign trunc_ln647_fu_513_p1 = gmem1_RDATA[31:0];

assign v1_V_fu_867_p3 = ((icmp_ln883_1_fu_814_p2[0:0] === 1'b1) ? 32'd4294967295 : select_ln82_1_fu_860_p3);

assign v2_V_fu_806_p3 = ((icmp_ln883_fu_753_p2[0:0] === 1'b1) ? 32'd4294967295 : select_ln82_fu_799_p3);

assign zext_ln58_fu_491_p1 = tmp_5_reg_882;

always @ (posedge ap_clk) begin
    gmem0_addr_reg_898[63:61] <= 3'b000;
end

endmodule //accel_in_circle_accel_in_circle
