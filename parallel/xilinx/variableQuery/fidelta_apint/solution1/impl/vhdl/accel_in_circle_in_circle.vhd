-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_in_circle_in_circle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    innerdata_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    innerdata_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    father_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    father_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    father_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    father_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    father_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    father_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of accel_in_circle_in_circle is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_78_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xda_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdb_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdc_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal yda_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ydb_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ydc_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal da2da2_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal db2db2_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc2dc2_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min1_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min2_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal min3_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_444_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_444_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_444_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal det_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bitcast_ln30_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln30_fu_224_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln30_1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_78_ce : STD_LOGIC;
    signal grp_fu_84_ce : STD_LOGIC;
    signal grp_fu_90_ce : STD_LOGIC;
    signal grp_fu_96_ce : STD_LOGIC;
    signal grp_fu_102_ce : STD_LOGIC;
    signal grp_fu_108_ce : STD_LOGIC;
    signal grp_fu_114_ce : STD_LOGIC;
    signal grp_fu_118_ce : STD_LOGIC;
    signal grp_fu_122_ce : STD_LOGIC;
    signal grp_fu_126_ce : STD_LOGIC;
    signal grp_fu_130_ce : STD_LOGIC;
    signal grp_fu_134_ce : STD_LOGIC;
    signal grp_fu_138_ce : STD_LOGIC;
    signal grp_fu_142_ce : STD_LOGIC;
    signal grp_fu_146_ce : STD_LOGIC;
    signal grp_fu_150_ce : STD_LOGIC;
    signal grp_fu_154_ce : STD_LOGIC;
    signal grp_fu_158_ce : STD_LOGIC;
    signal grp_fu_162_ce : STD_LOGIC;
    signal grp_fu_166_ce : STD_LOGIC;
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_174_ce : STD_LOGIC;
    signal grp_fu_178_ce : STD_LOGIC;
    signal grp_fu_182_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_190_ce : STD_LOGIC;
    signal grp_fu_194_ce : STD_LOGIC;
    signal grp_fu_198_ce : STD_LOGIC;
    signal grp_fu_202_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal and_ln30_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal innerdata_0_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal innerdata_1_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal father_0_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal father_1_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal father_2_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal father_3_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal father_4_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal father_5_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (0 downto 0);

    component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_in_circle_accel_in_circle_fcmp_32ns_32ns_1_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U1 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => father_0_read_int_reg,
        din1 => innerdata_0_read_int_reg,
        ce => grp_fu_78_ce,
        dout => grp_fu_78_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U2 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => father_2_read_int_reg,
        din1 => innerdata_0_read_int_reg,
        ce => grp_fu_84_ce,
        dout => grp_fu_84_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U3 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => father_4_read_int_reg,
        din1 => innerdata_0_read_int_reg,
        ce => grp_fu_90_ce,
        dout => grp_fu_90_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U4 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => father_1_read_int_reg,
        din1 => innerdata_1_read_int_reg,
        ce => grp_fu_96_ce,
        dout => grp_fu_96_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U5 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => father_3_read_int_reg,
        din1 => innerdata_1_read_int_reg,
        ce => grp_fu_102_ce,
        dout => grp_fu_102_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U6 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => father_5_read_int_reg,
        din1 => innerdata_1_read_int_reg,
        ce => grp_fu_108_ce,
        dout => grp_fu_108_p2);

    accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0_U7 : component accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_344,
        din1 => tmp_1_reg_349,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);

    accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0_U8 : component accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_354,
        din1 => tmp_3_reg_359,
        ce => grp_fu_118_ce,
        dout => grp_fu_118_p2);

    accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0_U9 : component accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_364,
        din1 => tmp_5_reg_369,
        ce => grp_fu_122_ce,
        dout => grp_fu_122_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U10 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_374,
        din1 => tmp_7_reg_379,
        ce => grp_fu_126_ce,
        dout => grp_fu_126_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U11 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_384,
        din1 => tmp_9_reg_389,
        ce => grp_fu_130_ce,
        dout => grp_fu_130_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U12 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_394,
        din1 => tmp_10_reg_399,
        ce => grp_fu_134_ce,
        dout => grp_fu_134_p2);

    accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0_U13 : component accel_in_circle_accel_in_circle_fsub_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_11_reg_434,
        din1 => tmp_12_reg_439,
        ce => grp_fu_138_ce,
        dout => grp_fu_138_p2);

    accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0_U14 : component accel_in_circle_accel_in_circle_fadd_32ns_32ns_32_3_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_13_reg_449,
        din1 => tmp_14_reg_444_pp0_iter12_reg,
        ce => grp_fu_142_ce,
        dout => grp_fu_142_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U15 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xda_reg_296,
        din1 => xda_reg_296,
        ce => grp_fu_146_ce,
        dout => grp_fu_146_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U16 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => yda_reg_320,
        din1 => yda_reg_320,
        ce => grp_fu_150_ce,
        dout => grp_fu_150_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U17 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdb_reg_304,
        din1 => xdb_reg_304,
        ce => grp_fu_154_ce,
        dout => grp_fu_154_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U18 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ydb_reg_328,
        din1 => ydb_reg_328,
        ce => grp_fu_158_ce,
        dout => grp_fu_158_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U19 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdc_reg_312,
        din1 => xdc_reg_312,
        ce => grp_fu_162_ce,
        dout => grp_fu_162_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U20 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ydc_reg_336,
        din1 => ydc_reg_336,
        ce => grp_fu_166_ce,
        dout => grp_fu_166_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U21 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdb_reg_304,
        din1 => ydc_reg_336,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U22 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdc_reg_312,
        din1 => ydb_reg_328,
        ce => grp_fu_174_ce,
        dout => grp_fu_174_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U23 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xda_reg_296,
        din1 => ydc_reg_336,
        ce => grp_fu_178_ce,
        dout => grp_fu_178_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U24 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdc_reg_312,
        din1 => yda_reg_320,
        ce => grp_fu_182_ce,
        dout => grp_fu_182_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U25 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xda_reg_296,
        din1 => ydb_reg_328,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U26 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdb_reg_304,
        din1 => yda_reg_320,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U27 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => da2da2_reg_404,
        din1 => min1_reg_419,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U28 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => db2db2_reg_409,
        din1 => min2_reg_424,
        ce => grp_fu_198_ce,
        dout => grp_fu_198_p2);

    accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0_U29 : component accel_in_circle_accel_in_circle_fmul_32ns_32ns_32_2_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc2dc2_reg_414,
        din1 => min3_reg_429,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);

    accel_in_circle_fcmp_32ns_32ns_1_1_0_U30 : component accel_in_circle_accel_in_circle_fcmp_32ns_32ns_1_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => det_reg_454,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_16_fu_206_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= and_ln30_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                da2da2_reg_404 <= grp_fu_114_p2;
                db2db2_reg_409 <= grp_fu_118_p2;
                dc2dc2_reg_414 <= grp_fu_122_p2;
                det_reg_454 <= grp_fu_142_p2;
                min1_reg_419 <= grp_fu_126_p2;
                min2_reg_424 <= grp_fu_130_p2;
                min3_reg_429 <= grp_fu_134_p2;
                tmp_10_reg_399 <= grp_fu_190_p2;
                tmp_11_reg_434 <= grp_fu_194_p2;
                tmp_12_reg_439 <= grp_fu_198_p2;
                tmp_13_reg_449 <= grp_fu_138_p2;
                tmp_14_reg_444 <= grp_fu_202_p2;
                tmp_14_reg_444_pp0_iter10_reg <= tmp_14_reg_444;
                tmp_14_reg_444_pp0_iter11_reg <= tmp_14_reg_444_pp0_iter10_reg;
                tmp_14_reg_444_pp0_iter12_reg <= tmp_14_reg_444_pp0_iter11_reg;
                tmp_1_reg_349 <= grp_fu_150_p2;
                tmp_2_reg_354 <= grp_fu_154_p2;
                tmp_3_reg_359 <= grp_fu_158_p2;
                tmp_4_reg_364 <= grp_fu_162_p2;
                tmp_5_reg_369 <= grp_fu_166_p2;
                tmp_6_reg_374 <= grp_fu_170_p2;
                tmp_7_reg_379 <= grp_fu_174_p2;
                tmp_8_reg_384 <= grp_fu_178_p2;
                tmp_9_reg_389 <= grp_fu_182_p2;
                tmp_reg_344 <= grp_fu_146_p2;
                tmp_s_reg_394 <= grp_fu_186_p2;
                xda_reg_296 <= grp_fu_78_p2;
                xdb_reg_304 <= grp_fu_84_p2;
                xdc_reg_312 <= grp_fu_90_p2;
                yda_reg_320 <= grp_fu_96_p2;
                ydb_reg_328 <= grp_fu_102_p2;
                ydc_reg_336 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                father_0_read_int_reg <= father_0_read;
                father_1_read_int_reg <= father_1_read;
                father_2_read_int_reg <= father_2_read;
                father_3_read_int_reg <= father_3_read;
                father_4_read_int_reg <= father_4_read;
                father_5_read_int_reg <= father_5_read;
                innerdata_0_read_int_reg <= innerdata_0_read;
                innerdata_1_read_int_reg <= innerdata_1_read;
            end if;
        end if;
    end process;
    and_ln30_fu_246_p2 <= (tmp_16_fu_206_p2 and or_ln30_fu_240_p2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(and_ln30_fu_246_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= and_ln30_fu_246_p2;
        end if; 
    end process;

    bitcast_ln30_fu_211_p1 <= det_reg_454;

    grp_fu_102_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_102_ce <= ap_const_logic_1;
        else 
            grp_fu_102_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_108_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_108_ce <= ap_const_logic_1;
        else 
            grp_fu_108_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_114_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_118_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_118_ce <= ap_const_logic_1;
        else 
            grp_fu_118_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_122_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_122_ce <= ap_const_logic_1;
        else 
            grp_fu_122_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_126_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_126_ce <= ap_const_logic_1;
        else 
            grp_fu_126_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_130_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_130_ce <= ap_const_logic_1;
        else 
            grp_fu_130_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_134_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_134_ce <= ap_const_logic_1;
        else 
            grp_fu_134_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_138_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_138_ce <= ap_const_logic_1;
        else 
            grp_fu_138_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_142_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_142_ce <= ap_const_logic_1;
        else 
            grp_fu_142_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_146_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_146_ce <= ap_const_logic_1;
        else 
            grp_fu_146_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_150_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_150_ce <= ap_const_logic_1;
        else 
            grp_fu_150_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_154_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_154_ce <= ap_const_logic_1;
        else 
            grp_fu_154_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_158_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_158_ce <= ap_const_logic_1;
        else 
            grp_fu_158_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_162_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_162_ce <= ap_const_logic_1;
        else 
            grp_fu_162_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_166_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_166_ce <= ap_const_logic_1;
        else 
            grp_fu_166_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_170_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_170_ce <= ap_const_logic_1;
        else 
            grp_fu_170_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_174_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_174_ce <= ap_const_logic_1;
        else 
            grp_fu_174_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_178_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_178_ce <= ap_const_logic_1;
        else 
            grp_fu_178_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_182_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_182_ce <= ap_const_logic_1;
        else 
            grp_fu_182_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_186_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_186_ce <= ap_const_logic_1;
        else 
            grp_fu_186_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_190_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_190_ce <= ap_const_logic_1;
        else 
            grp_fu_190_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_194_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_198_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_198_ce <= ap_const_logic_1;
        else 
            grp_fu_198_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_202_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_202_ce <= ap_const_logic_1;
        else 
            grp_fu_202_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_78_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_78_ce <= ap_const_logic_1;
        else 
            grp_fu_78_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_84_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_84_ce <= ap_const_logic_1;
        else 
            grp_fu_84_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_90_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_90_ce <= ap_const_logic_1;
        else 
            grp_fu_90_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_96_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_96_ce <= ap_const_logic_1;
        else 
            grp_fu_96_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln30_1_fu_234_p2 <= "1" when (trunc_ln30_fu_224_p1 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_228_p2 <= "0" when (tmp_15_fu_214_p4 = ap_const_lv8_FF) else "1";
    or_ln30_fu_240_p2 <= (icmp_ln30_fu_228_p2 or icmp_ln30_1_fu_234_p2);
    tmp_15_fu_214_p4 <= bitcast_ln30_fu_211_p1(30 downto 23);
    trunc_ln30_fu_224_p1 <= bitcast_ln30_fu_211_p1(23 - 1 downto 0);
end behav;
